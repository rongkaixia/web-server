/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AuthType', null, global);
goog.exportSymbol('proto.LoginType', null, global);
goog.exportSymbol('proto.Message', null, global);
goog.exportSymbol('proto.MsgType', null, global);
goog.exportSymbol('proto.Request', null, global);
goog.exportSymbol('proto.Request.AuthenticationRequest', null, global);
goog.exportSymbol('proto.Request.LoginRequest', null, global);
goog.exportSymbol('proto.Request.SignupRequest', null, global);
goog.exportSymbol('proto.Response', null, global);
goog.exportSymbol('proto.Response.AuthenticationResponse', null, global);
goog.exportSymbol('proto.Response.LoginResponse', null, global);
goog.exportSymbol('proto.Response.SignupResponse', null, global);
goog.exportSymbol('proto.ResultCode', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Request.oneofGroups_);
};
goog.inherits(proto.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Request.displayName = 'proto.Request';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Request.oneofGroups_ = [[1001,1002,1003]];

/**
 * @enum {number}
 */
proto.Request.ContentCase = {
  CONTENT_NOT_SET: 0,
  SIGNUP_REQUEST: 1001,
  LOGIN_REQUEST: 1002,
  AUTHENTICATION_REQUEST: 1003
};

/**
 * @return {proto.Request.ContentCase}
 */
proto.Request.prototype.getContentCase = function() {
  return /** @type {proto.Request.ContentCase} */(jspb.Message.computeOneofCase(this, proto.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    signupRequest: (f = msg.getSignupRequest()) && proto.Request.SignupRequest.toObject(includeInstance, f),
    loginRequest: (f = msg.getLoginRequest()) && proto.Request.LoginRequest.toObject(includeInstance, f),
    authenticationRequest: (f = msg.getAuthenticationRequest()) && proto.Request.AuthenticationRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Request}
 */
proto.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Request;
  return proto.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Request}
 */
proto.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1001:
      var value = new proto.Request.SignupRequest;
      reader.readMessage(value,proto.Request.SignupRequest.deserializeBinaryFromReader);
      msg.setSignupRequest(value);
      break;
    case 1002:
      var value = new proto.Request.LoginRequest;
      reader.readMessage(value,proto.Request.LoginRequest.deserializeBinaryFromReader);
      msg.setLoginRequest(value);
      break;
    case 1003:
      var value = new proto.Request.AuthenticationRequest;
      reader.readMessage(value,proto.Request.AuthenticationRequest.deserializeBinaryFromReader);
      msg.setAuthenticationRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Request.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Request.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSignupRequest();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.Request.SignupRequest.serializeBinaryToWriter
    );
  }
  f = this.getLoginRequest();
  if (f != null) {
    writer.writeMessage(
      1002,
      f,
      proto.Request.LoginRequest.serializeBinaryToWriter
    );
  }
  f = this.getAuthenticationRequest();
  if (f != null) {
    writer.writeMessage(
      1003,
      f,
      proto.Request.AuthenticationRequest.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Request} The clone.
 */
proto.Request.prototype.cloneMessage = function() {
  return /** @type {!proto.Request} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional SignupRequest signup_request = 1001;
 * @return {proto.Request.SignupRequest}
 */
proto.Request.prototype.getSignupRequest = function() {
  return /** @type{proto.Request.SignupRequest} */ (
    jspb.Message.getWrapperField(this, proto.Request.SignupRequest, 1001));
};


/** @param {proto.Request.SignupRequest|undefined} value  */
proto.Request.prototype.setSignupRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1001, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearSignupRequest = function() {
  this.setSignupRequest(undefined);
};


/**
 * optional LoginRequest login_request = 1002;
 * @return {proto.Request.LoginRequest}
 */
proto.Request.prototype.getLoginRequest = function() {
  return /** @type{proto.Request.LoginRequest} */ (
    jspb.Message.getWrapperField(this, proto.Request.LoginRequest, 1002));
};


/** @param {proto.Request.LoginRequest|undefined} value  */
proto.Request.prototype.setLoginRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1002, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearLoginRequest = function() {
  this.setLoginRequest(undefined);
};


/**
 * optional AuthenticationRequest authentication_request = 1003;
 * @return {proto.Request.AuthenticationRequest}
 */
proto.Request.prototype.getAuthenticationRequest = function() {
  return /** @type{proto.Request.AuthenticationRequest} */ (
    jspb.Message.getWrapperField(this, proto.Request.AuthenticationRequest, 1003));
};


/** @param {proto.Request.AuthenticationRequest|undefined} value  */
proto.Request.prototype.setAuthenticationRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1003, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearAuthenticationRequest = function() {
  this.setAuthenticationRequest(undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Request.SignupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Request.SignupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Request.SignupRequest.displayName = 'proto.Request.SignupRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Request.SignupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Request.SignupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Request.SignupRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Request.SignupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    phonenum: msg.getPhonenum(),
    password: msg.getPassword()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Request.SignupRequest}
 */
proto.Request.SignupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Request.SignupRequest;
  return proto.Request.SignupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Request.SignupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Request.SignupRequest}
 */
proto.Request.SignupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Request.SignupRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Request.SignupRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Request.SignupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Request.SignupRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPhonenum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Request.SignupRequest} The clone.
 */
proto.Request.SignupRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.Request.SignupRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string phonenum = 1;
 * @return {string}
 */
proto.Request.SignupRequest.prototype.getPhonenum = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.Request.SignupRequest.prototype.setPhonenum = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.Request.SignupRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Request.SignupRequest.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Request.LoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Request.LoginRequest.oneofGroups_);
};
goog.inherits(proto.Request.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Request.LoginRequest.displayName = 'proto.Request.LoginRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Request.LoginRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.Request.LoginRequest.NameCase = {
  NAME_NOT_SET: 0,
  PHONENUM: 1,
  USERNAME: 2,
  EMAIL: 3
};

/**
 * @return {proto.Request.LoginRequest.NameCase}
 */
proto.Request.LoginRequest.prototype.getNameCase = function() {
  return /** @type {proto.Request.LoginRequest.NameCase} */(jspb.Message.computeOneofCase(this, proto.Request.LoginRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Request.LoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Request.LoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Request.LoginRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Request.LoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    phonenum: jspb.Message.getField(msg, 1),
    username: jspb.Message.getField(msg, 2),
    email: jspb.Message.getField(msg, 3),
    password: msg.getPassword()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Request.LoginRequest}
 */
proto.Request.LoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Request.LoginRequest;
  return proto.Request.LoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Request.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Request.LoginRequest}
 */
proto.Request.LoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Request.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Request.LoginRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Request.LoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Request.LoginRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPhonenum();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getUsername();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getEmail();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPassword();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Request.LoginRequest} The clone.
 */
proto.Request.LoginRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.Request.LoginRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string phonenum = 1;
 * @return {string?}
 */
proto.Request.LoginRequest.prototype.getPhonenum = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 1));
};


/** @param {string?|undefined} value  */
proto.Request.LoginRequest.prototype.setPhonenum = function(value) {
  jspb.Message.setOneofField(this, 1, proto.Request.LoginRequest.oneofGroups_[0], value);
};


proto.Request.LoginRequest.prototype.clearPhonenum = function() {
  jspb.Message.setOneofField(this, 1, proto.Request.LoginRequest.oneofGroups_[0], undefined);
};


/**
 * optional string username = 2;
 * @return {string?}
 */
proto.Request.LoginRequest.prototype.getUsername = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 2));
};


/** @param {string?|undefined} value  */
proto.Request.LoginRequest.prototype.setUsername = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Request.LoginRequest.oneofGroups_[0], value);
};


proto.Request.LoginRequest.prototype.clearUsername = function() {
  jspb.Message.setOneofField(this, 2, proto.Request.LoginRequest.oneofGroups_[0], undefined);
};


/**
 * optional string email = 3;
 * @return {string?}
 */
proto.Request.LoginRequest.prototype.getEmail = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.Request.LoginRequest.prototype.setEmail = function(value) {
  jspb.Message.setOneofField(this, 3, proto.Request.LoginRequest.oneofGroups_[0], value);
};


proto.Request.LoginRequest.prototype.clearEmail = function() {
  jspb.Message.setOneofField(this, 3, proto.Request.LoginRequest.oneofGroups_[0], undefined);
};


/**
 * optional string password = 10;
 * @return {string}
 */
proto.Request.LoginRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.Request.LoginRequest.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Request.AuthenticationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Request.AuthenticationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Request.AuthenticationRequest.displayName = 'proto.Request.AuthenticationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Request.AuthenticationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Request.AuthenticationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Request.AuthenticationRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Request.AuthenticationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: msg.getToken()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Request.AuthenticationRequest}
 */
proto.Request.AuthenticationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Request.AuthenticationRequest;
  return proto.Request.AuthenticationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Request.AuthenticationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Request.AuthenticationRequest}
 */
proto.Request.AuthenticationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Request.AuthenticationRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Request.AuthenticationRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Request.AuthenticationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Request.AuthenticationRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Request.AuthenticationRequest} The clone.
 */
proto.Request.AuthenticationRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.Request.AuthenticationRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.Request.AuthenticationRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.Request.AuthenticationRequest.prototype.setToken = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Response.oneofGroups_);
};
goog.inherits(proto.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Response.displayName = 'proto.Response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Response.oneofGroups_ = [[1001,1002,1003]];

/**
 * @enum {number}
 */
proto.Response.ContentCase = {
  CONTENT_NOT_SET: 0,
  SIGNUP_RESPONSE: 1001,
  LOGIN_RESPONSE: 1002,
  AUTHENTICATION_RESPONSE: 1003
};

/**
 * @return {proto.Response.ContentCase}
 */
proto.Response.prototype.getContentCase = function() {
  return /** @type {proto.Response.ContentCase} */(jspb.Message.computeOneofCase(this, proto.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Response} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: msg.getResult(),
    errorDescription: msg.getErrorDescription(),
    signupResponse: (f = msg.getSignupResponse()) && proto.Response.SignupResponse.toObject(includeInstance, f),
    loginResponse: (f = msg.getLoginResponse()) && proto.Response.LoginResponse.toObject(includeInstance, f),
    authenticationResponse: (f = msg.getAuthenticationResponse()) && proto.Response.AuthenticationResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Response;
  return proto.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 1001:
      var value = new proto.Response.SignupResponse;
      reader.readMessage(value,proto.Response.SignupResponse.deserializeBinaryFromReader);
      msg.setSignupResponse(value);
      break;
    case 1002:
      var value = new proto.Response.LoginResponse;
      reader.readMessage(value,proto.Response.LoginResponse.deserializeBinaryFromReader);
      msg.setLoginResponse(value);
      break;
    case 1003:
      var value = new proto.Response.AuthenticationResponse;
      reader.readMessage(value,proto.Response.AuthenticationResponse.deserializeBinaryFromReader);
      msg.setAuthenticationResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Response} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Response.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Response.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSignupResponse();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.Response.SignupResponse.serializeBinaryToWriter
    );
  }
  f = this.getLoginResponse();
  if (f != null) {
    writer.writeMessage(
      1002,
      f,
      proto.Response.LoginResponse.serializeBinaryToWriter
    );
  }
  f = this.getAuthenticationResponse();
  if (f != null) {
    writer.writeMessage(
      1003,
      f,
      proto.Response.AuthenticationResponse.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Response} The clone.
 */
proto.Response.prototype.cloneMessage = function() {
  return /** @type {!proto.Response} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ResultCode result = 1;
 * @return {!proto.ResultCode}
 */
proto.Response.prototype.getResult = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.ResultCode} value  */
proto.Response.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string error_description = 2;
 * @return {string}
 */
proto.Response.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Response.prototype.setErrorDescription = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional SignupResponse signup_response = 1001;
 * @return {proto.Response.SignupResponse}
 */
proto.Response.prototype.getSignupResponse = function() {
  return /** @type{proto.Response.SignupResponse} */ (
    jspb.Message.getWrapperField(this, proto.Response.SignupResponse, 1001));
};


/** @param {proto.Response.SignupResponse|undefined} value  */
proto.Response.prototype.setSignupResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 1001, proto.Response.oneofGroups_[0], value);
};


proto.Response.prototype.clearSignupResponse = function() {
  this.setSignupResponse(undefined);
};


/**
 * optional LoginResponse login_response = 1002;
 * @return {proto.Response.LoginResponse}
 */
proto.Response.prototype.getLoginResponse = function() {
  return /** @type{proto.Response.LoginResponse} */ (
    jspb.Message.getWrapperField(this, proto.Response.LoginResponse, 1002));
};


/** @param {proto.Response.LoginResponse|undefined} value  */
proto.Response.prototype.setLoginResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 1002, proto.Response.oneofGroups_[0], value);
};


proto.Response.prototype.clearLoginResponse = function() {
  this.setLoginResponse(undefined);
};


/**
 * optional AuthenticationResponse authentication_response = 1003;
 * @return {proto.Response.AuthenticationResponse}
 */
proto.Response.prototype.getAuthenticationResponse = function() {
  return /** @type{proto.Response.AuthenticationResponse} */ (
    jspb.Message.getWrapperField(this, proto.Response.AuthenticationResponse, 1003));
};


/** @param {proto.Response.AuthenticationResponse|undefined} value  */
proto.Response.prototype.setAuthenticationResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 1003, proto.Response.oneofGroups_[0], value);
};


proto.Response.prototype.clearAuthenticationResponse = function() {
  this.setAuthenticationResponse(undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Response.SignupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Response.SignupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Response.SignupResponse.displayName = 'proto.Response.SignupResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Response.SignupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Response.SignupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Response.SignupResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Response.SignupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Response.SignupResponse}
 */
proto.Response.SignupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Response.SignupResponse;
  return proto.Response.SignupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Response.SignupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Response.SignupResponse}
 */
proto.Response.SignupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Response.SignupResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Response.SignupResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Response.SignupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Response.SignupResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Response.SignupResponse} The clone.
 */
proto.Response.SignupResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.Response.SignupResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Response.LoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Response.LoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Response.LoginResponse.displayName = 'proto.Response.LoginResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Response.LoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Response.LoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Response.LoginResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Response.LoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: msg.getToken(),
    expiresIn: msg.getExpiresIn(),
    userId: msg.getUserId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Response.LoginResponse}
 */
proto.Response.LoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Response.LoginResponse;
  return proto.Response.LoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Response.LoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Response.LoginResponse}
 */
proto.Response.LoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpiresIn(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Response.LoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Response.LoginResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Response.LoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Response.LoginResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getExpiresIn();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Response.LoginResponse} The clone.
 */
proto.Response.LoginResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.Response.LoginResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.Response.LoginResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.Response.LoginResponse.prototype.setToken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 expires_in = 2;
 * @return {number}
 */
proto.Response.LoginResponse.prototype.getExpiresIn = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.Response.LoginResponse.prototype.setExpiresIn = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.Response.LoginResponse.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.Response.LoginResponse.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Response.AuthenticationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Response.AuthenticationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Response.AuthenticationResponse.displayName = 'proto.Response.AuthenticationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Response.AuthenticationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Response.AuthenticationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Response.AuthenticationResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Response.AuthenticationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isExpired: msg.getIsExpired(),
    expiresIn: msg.getExpiresIn(),
    userId: msg.getUserId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Response.AuthenticationResponse}
 */
proto.Response.AuthenticationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Response.AuthenticationResponse;
  return proto.Response.AuthenticationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Response.AuthenticationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Response.AuthenticationResponse}
 */
proto.Response.AuthenticationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsExpired(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpiresIn(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Response.AuthenticationResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Response.AuthenticationResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Response.AuthenticationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Response.AuthenticationResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIsExpired();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getExpiresIn();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Response.AuthenticationResponse} The clone.
 */
proto.Response.AuthenticationResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.Response.AuthenticationResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool is_expired = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Response.AuthenticationResponse.prototype.getIsExpired = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.Response.AuthenticationResponse.prototype.setIsExpired = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 expires_in = 2;
 * @return {number}
 */
proto.Response.AuthenticationResponse.prototype.getExpiresIn = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.Response.AuthenticationResponse.prototype.setExpiresIn = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.Response.AuthenticationResponse.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.Response.AuthenticationResponse.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Message.oneofGroups_);
};
goog.inherits(proto.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Message.displayName = 'proto.Message';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Message.oneofGroups_ = [[1001,1002]];

/**
 * @enum {number}
 */
proto.Message.BodyCase = {
  BODY_NOT_SET: 0,
  REQUEST: 1001,
  RESPONSE: 1002
};

/**
 * @return {proto.Message.BodyCase}
 */
proto.Message.prototype.getBodyCase = function() {
  return /** @type {proto.Message.BodyCase} */(jspb.Message.computeOneofCase(this, proto.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgType: msg.getMsgType(),
    request: (f = msg.getRequest()) && proto.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message;
  return proto.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MsgType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    case 1001:
      var value = new proto.Request;
      reader.readMessage(value,proto.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 1002:
      var value = new proto.Response;
      reader.readMessage(value,proto.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Message} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Message.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Message.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMsgType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getRequest();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.Request.serializeBinaryToWriter
    );
  }
  f = this.getResponse();
  if (f != null) {
    writer.writeMessage(
      1002,
      f,
      proto.Response.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Message} The clone.
 */
proto.Message.prototype.cloneMessage = function() {
  return /** @type {!proto.Message} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional MsgType msg_type = 1;
 * @return {!proto.MsgType}
 */
proto.Message.prototype.getMsgType = function() {
  return /** @type {!proto.MsgType} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.MsgType} value  */
proto.Message.prototype.setMsgType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Request request = 1001;
 * @return {proto.Request}
 */
proto.Message.prototype.getRequest = function() {
  return /** @type{proto.Request} */ (
    jspb.Message.getWrapperField(this, proto.Request, 1001));
};


/** @param {proto.Request|undefined} value  */
proto.Message.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1001, proto.Message.oneofGroups_[0], value);
};


proto.Message.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * optional Response response = 1002;
 * @return {proto.Response}
 */
proto.Message.prototype.getResponse = function() {
  return /** @type{proto.Response} */ (
    jspb.Message.getWrapperField(this, proto.Response, 1002));
};


/** @param {proto.Response|undefined} value  */
proto.Message.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 1002, proto.Message.oneofGroups_[0], value);
};


proto.Message.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * @enum {number}
 */
proto.MsgType = {
  MSG_TYPE_EMPTY: 0,
  SIGNUP_REQUEST: 1,
  LOGIN_REQUEST: 2,
  AUTHENTICATION_REQUEST: 3,
  SIGNUP_RESPONSE: 65536,
  LOGIN_RESPONSE: 65537,
  AUTHENTICATION_RESPONSE: 65538
};

/**
 * @enum {number}
 */
proto.LoginType = {
  LOGIN_TYPE_EMPTY: 0,
  LOGIN_BY_USERNAME: 1,
  LOGIN_BY_PHONENUM: 2,
  LOGIN_BY_EMAIL: 3,
  LOGIN_BY_WECHAT: 4,
  LOGIN_BY_WEIBO: 5
};

/**
 * @enum {number}
 */
proto.AuthType = {
  AUTH_TYPE_EMPTY: 0,
  LOCAL: 1,
  WECHAT: 2,
  WEIBO: 3
};

/**
 * @enum {number}
 */
proto.ResultCode = {
  SUCCESS: 0,
  INTERNAL_SERVER_ERROR: 10000,
  REQUEST_RESOURCE_NOT_FOUND: 10001,
  METHOD_NOT_ALLOW: 10002,
  MESSAGE_TYPE_ERROR: 10003,
  INVALID_MESSAGE: 10004,
  SIGNUP_INVALID_PHONENUM: 20001,
  SIGNUP_PHONENUM_ALREADY_EXISTED: 20002,
  SIGNUP_INVALID_PASSWORD: 20003,
  LOGIN_INVALID_USER: 30001,
  LOGIN_INVALID_PASSWORD: 30002,
  INVALID_TOKEN: 40001
};

goog.object.extend(exports, proto);
